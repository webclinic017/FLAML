"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[746],{5680:(e,t,n)=>{n.d(t,{xA:()=>c,yg:()=>d});var r=n(6540);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=s(n),d=a,g=u["".concat(p,".").concat(d)]||u[d]||m[d]||i;return n?r.createElement(g,o(o({ref:t},c),{},{components:n})):r.createElement(g,o({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},6070:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var r=n(8168),a=(n(6540),n(5680));const i={},o=void 0,l={unversionedId:"Examples/Integrate - Scikit-learn Pipeline",id:"Examples/Integrate - Scikit-learn Pipeline",isDocsHomePage:!1,title:"Integrate - Scikit-learn Pipeline",description:"As FLAML's AutoML module can be used a transformer in the Sklearn's pipeline we can get all the benefits of pipeline.",source:"@site/docs/Examples/Integrate - Scikit-learn Pipeline.md",sourceDirName:"Examples",slug:"/Examples/Integrate - Scikit-learn Pipeline",permalink:"/FLAML/docs/Examples/Integrate - Scikit-learn Pipeline",editUrl:"https://github.com/microsoft/FLAML/edit/main/website/docs/Examples/Integrate - Scikit-learn Pipeline.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Integrate - AzureML",permalink:"/FLAML/docs/Examples/Integrate - AzureML"},next:{title:"Integrate - Spark",permalink:"/FLAML/docs/Examples/Integrate - Spark"}},p=[{value:"Prerequisites",id:"prerequisites",children:[],level:3},{value:"Load data",id:"load-data",children:[],level:3},{value:"Create a pipeline",id:"create-a-pipeline",children:[],level:3},{value:"Run AutoML in the pipeline",id:"run-automl-in-the-pipeline",children:[],level:3},{value:"Get the automl object from the pipeline",id:"get-the-automl-object-from-the-pipeline",children:[],level:3}],s={toc:p};function c(e){let{components:t,...i}=e;return(0,a.yg)("wrapper",(0,r.A)({},s,i,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("p",null,"As FLAML's AutoML module can be used a transformer in the Sklearn's pipeline we can get all the benefits of pipeline."),(0,a.yg)("h3",{id:"prerequisites"},"Prerequisites"),(0,a.yg)("p",null,"Install the ","[","automl","]"," option."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},'pip install "flaml[automl] openml"\n')),(0,a.yg)("h3",{id:"load-data"},"Load data"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},'from flaml.automl.data import load_openml_dataset\n\n# Download [Airlines dataset](https://www.openml.org/d/1169) from OpenML. The task is to predict whether a given flight will be delayed, given the information of the scheduled departure.\nX_train, X_test, y_train, y_test = load_openml_dataset(\n    dataset_id=1169, data_dir="./", random_state=1234, dataset_format="array"\n)\n')),(0,a.yg)("h3",{id:"create-a-pipeline"},"Create a pipeline"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},'from sklearn import set_config\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import StandardScaler\nfrom flaml import AutoML\n\nset_config(display="diagram")\n\nimputer = SimpleImputer()\nstandardizer = StandardScaler()\nautoml = AutoML()\n\nautoml_pipeline = Pipeline(\n    [("imputuer", imputer), ("standardizer", standardizer), ("automl", automl)]\n)\nautoml_pipeline\n')),(0,a.yg)("p",null,(0,a.yg)("img",{alt:"png",src:n(2292).A})),(0,a.yg)("h3",{id:"run-automl-in-the-pipeline"},"Run AutoML in the pipeline"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},'automl_settings = {\n    "time_budget": 60,  # total running time in seconds\n    "metric": "accuracy",  # primary metrics can be chosen from: [\'accuracy\', \'roc_auc\', \'roc_auc_weighted\', \'roc_auc_ovr\', \'roc_auc_ovo\', \'f1\', \'log_loss\', \'mae\', \'mse\', \'r2\'] Check the documentation for more details (https://microsoft.github.io/FLAML/docs/Use-Cases/Task-Oriented-AutoML#optimization-metric)\n    "task": "classification",  # task type\n    "estimator_list": ["xgboost", "catboost", "lgbm"],\n    "log_file_name": "airlines_experiment.log",  # flaml log file\n}\npipeline_settings = {f"automl__{key}": value for key, value in automl_settings.items()}\nautoml_pipeline.fit(X_train, y_train, **pipeline_settings)\n')),(0,a.yg)("h3",{id:"get-the-automl-object-from-the-pipeline"},"Get the automl object from the pipeline"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},'automl = automl_pipeline.steps[2][1]\n# Get the best config and best learner\nprint("Best ML leaner:", automl.best_estimator)\nprint("Best hyperparmeter config:", automl.best_config)\nprint("Best accuracy on validation data: {0:.4g}".format(1 - automl.best_loss))\nprint("Training duration of best run: {0:.4g} s".format(automl.best_config_train_time))\n')),(0,a.yg)("p",null,(0,a.yg)("a",{parentName:"p",href:"https://github.com/microsoft/FLAML/blob/main/notebook/integrate_sklearn.ipynb"},"Link to notebook")," | ",(0,a.yg)("a",{parentName:"p",href:"https://colab.research.google.com/github/microsoft/FLAML/blob/main/notebook/integrate_sklearn.ipynb"},"Open in colab")))}c.isMDXComponent=!0},2292:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/images/pipeline-7e27c1edb9e2dac4b1ee78f5ced90b1f.png"}}]);