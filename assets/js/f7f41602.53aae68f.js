"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3415],{5680:(e,r,t)=>{t.d(r,{xA:()=>p,yg:()=>y});var n=t(6540);function l(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){l(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function o(e,r){if(null==e)return{};var t,n,l=function(e,r){if(null==e)return{};var t,n,l={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(l[t]=e[t]);return l}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var s=n.createContext({}),u=function(e){var r=n.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},p=function(e){var r=u(e.components);return n.createElement(s.Provider,{value:r},e.children)},c={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},g=n.forwardRef((function(e,r){var t=e.components,l=e.mdxType,a=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),g=u(t),y=l,d=g["".concat(s,".").concat(y)]||g[y]||c[y]||a;return t?n.createElement(d,i(i({ref:r},p),{},{components:t})):n.createElement(d,i({ref:r},p))}));function y(e,r){var t=arguments,l=r&&r.mdxType;if("string"==typeof e||l){var a=t.length,i=new Array(a);i[0]=g;var o={};for(var s in r)hasOwnProperty.call(r,s)&&(o[s]=r[s]);o.originalType=e,o.mdxType="string"==typeof e?e:l,i[1]=o;for(var u=2;u<a;u++)i[u]=t[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}g.displayName="MDXCreateElement"},5788:(e,r,t)=>{t.r(r),t.d(r,{contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>o,toc:()=>s});var n=t(8168),l=(t(6540),t(5680));const a={sidebar_label:"trial_runner",title:"tune.trial_runner"},i=void 0,o={unversionedId:"reference/tune/trial_runner",id:"reference/tune/trial_runner",isDocsHomePage:!1,title:"tune.trial_runner",description:"Nologger Objects",source:"@site/docs/reference/tune/trial_runner.md",sourceDirName:"reference/tune",slug:"/reference/tune/trial_runner",permalink:"/FLAML/docs/reference/tune/trial_runner",editUrl:"https://github.com/microsoft/FLAML/edit/main/website/docs/reference/tune/trial_runner.md",tags:[],version:"current",frontMatter:{sidebar_label:"trial_runner",title:"tune.trial_runner"},sidebar:"referenceSideBar",previous:{title:"trial",permalink:"/FLAML/docs/reference/tune/trial"},next:{title:"tune",permalink:"/FLAML/docs/reference/tune/tune"}},s=[{value:"Nologger Objects",id:"nologger-objects",children:[],level:2},{value:"SimpleTrial Objects",id:"simpletrial-objects",children:[],level:2},{value:"BaseTrialRunner Objects",id:"basetrialrunner-objects",children:[{value:"get_trials",id:"get_trials",children:[],level:4},{value:"add_trial",id:"add_trial",children:[],level:4},{value:"stop_trial",id:"stop_trial",children:[],level:4}],level:2},{value:"SequentialTrialRunner Objects",id:"sequentialtrialrunner-objects",children:[{value:"step",id:"step",children:[],level:4}],level:2},{value:"SparkTrialRunner Objects",id:"sparktrialrunner-objects",children:[{value:"step",id:"step-1",children:[],level:4}],level:2}],u={toc:s};function p(e){let{components:r,...t}=e;return(0,l.yg)("wrapper",(0,n.A)({},u,t,{components:r,mdxType:"MDXLayout"}),(0,l.yg)("h2",{id:"nologger-objects"},"Nologger Objects"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-python"},"class Nologger()\n")),(0,l.yg)("p",null,"Logger without logging."),(0,l.yg)("h2",{id:"simpletrial-objects"},"SimpleTrial Objects"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-python"},"class SimpleTrial(Trial)\n")),(0,l.yg)("p",null,"A simple trial class."),(0,l.yg)("h2",{id:"basetrialrunner-objects"},"BaseTrialRunner Objects"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-python"},"class BaseTrialRunner()\n")),(0,l.yg)("p",null,"Implementation of a simple trial runner."),(0,l.yg)("p",null,"Note that the caller usually should not mutate trial state directly."),(0,l.yg)("h4",{id:"get_trials"},"get","_","trials"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-python"},"def get_trials()\n")),(0,l.yg)("p",null,"Returns the list of trials managed by this TrialRunner."),(0,l.yg)("p",null,"Note that the caller usually should not mutate trial state directly."),(0,l.yg)("h4",{id:"add_trial"},"add","_","trial"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-python"},"def add_trial(trial)\n")),(0,l.yg)("p",null,"Adds a new trial to this TrialRunner."),(0,l.yg)("p",null,"Trials may be added at any time."),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Arguments"),":"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"trial")," ",(0,l.yg)("em",{parentName:"li"},"Trial")," - Trial to queue.")),(0,l.yg)("h4",{id:"stop_trial"},"stop","_","trial"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-python"},"def stop_trial(trial)\n")),(0,l.yg)("p",null,"Stops trial."),(0,l.yg)("h2",{id:"sequentialtrialrunner-objects"},"SequentialTrialRunner Objects"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-python"},"class SequentialTrialRunner(BaseTrialRunner)\n")),(0,l.yg)("p",null,"Implementation of the sequential trial runner."),(0,l.yg)("h4",{id:"step"},"step"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-python"},"def step() -> Trial\n")),(0,l.yg)("p",null,"Runs one step of the trial event loop."),(0,l.yg)("p",null,"Callers should typically run this method repeatedly in a loop. They\nmay inspect or modify the runner's state in between calls to step()."),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Returns"),":"),(0,l.yg)("p",null,"  a trial to run."),(0,l.yg)("h2",{id:"sparktrialrunner-objects"},"SparkTrialRunner Objects"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-python"},"class SparkTrialRunner(BaseTrialRunner)\n")),(0,l.yg)("p",null,"Implementation of the spark trial runner."),(0,l.yg)("h4",{id:"step-1"},"step"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-python"},"def step() -> Trial\n")),(0,l.yg)("p",null,"Runs one step of the trial event loop."),(0,l.yg)("p",null,"Callers should typically run this method repeatedly in a loop. They\nmay inspect or modify the runner's state in between calls to step()."),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Returns"),":"),(0,l.yg)("p",null,"  a trial to run."))}p.isMDXComponent=!0}}]);