"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2661],{5680:(e,t,r)=>{r.d(t,{xA:()=>c,yg:()=>d});var a=r(6540);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=a.createContext({}),u=function(e){var t=a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},c=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),p=u(r),d=n,f=p["".concat(l,".").concat(d)]||p[d]||m[d]||i;return r?a.createElement(f,s(s({ref:t},c),{},{components:r})):a.createElement(f,s({ref:t},c))}));function d(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,s=new Array(i);s[0]=p;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:n,s[1]=o;for(var u=2;u<i;u++)s[u]=r[u];return a.createElement.apply(null,s)}return a.createElement.apply(null,r)}p.displayName="MDXCreateElement"},5401:(e,t,r)=>{r.r(t),r.d(t,{contentTitle:()=>s,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var a=r(8168),n=(r(6540),r(5680));const i={sidebar_label:"ts_data",title:"automl.time_series.ts_data"},s=void 0,o={unversionedId:"reference/automl/time_series/ts_data",id:"reference/automl/time_series/ts_data",isDocsHomePage:!1,title:"automl.time_series.ts_data",description:"TimeSeriesDataset Objects",source:"@site/docs/reference/automl/time_series/ts_data.md",sourceDirName:"reference/automl/time_series",slug:"/reference/automl/time_series/ts_data",permalink:"/FLAML/docs/reference/automl/time_series/ts_data",editUrl:"https://github.com/microsoft/FLAML/edit/main/website/docs/reference/automl/time_series/ts_data.md",tags:[],version:"current",frontMatter:{sidebar_label:"ts_data",title:"automl.time_series.ts_data"},sidebar:"referenceSideBar",previous:{title:"tft",permalink:"/FLAML/docs/reference/automl/time_series/tft"},next:{title:"ts_model",permalink:"/FLAML/docs/reference/automl/time_series/ts_model"}},l=[{value:"TimeSeriesDataset Objects",id:"timeseriesdataset-objects",children:[{value:"to_univariate",id:"to_univariate",children:[],level:4},{value:"fourier_series",id:"fourier_series",children:[],level:4}],level:2},{value:"DataTransformerTS Objects",id:"datatransformerts-objects",children:[{value:"fit",id:"fit",children:[],level:4}],level:2}],u={toc:l};function c(e){let{components:t,...r}=e;return(0,n.yg)("wrapper",(0,a.A)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,n.yg)("h2",{id:"timeseriesdataset-objects"},"TimeSeriesDataset Objects"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-python"},"@dataclass\nclass TimeSeriesDataset()\n")),(0,n.yg)("h4",{id:"to_univariate"},"to","_","univariate"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-python"},'def to_univariate() -> Dict[str, "TimeSeriesDataset"]\n')),(0,n.yg)("p",null,"Convert a multivariate TrainingData  to a dict of univariate ones\n@param df:\n@return:"),(0,n.yg)("h4",{id:"fourier_series"},"fourier","_","series"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-python"},"def fourier_series(feature: pd.Series, name: str)\n")),(0,n.yg)("p",null,"Assume feature goes from 0 to 1 cyclically, transform that into Fourier\n@param feature: input feature\n@return: sin(2pi",(0,n.yg)("em",{parentName:"p"},"feature), cos(2pi"),"feature)"),(0,n.yg)("h2",{id:"datatransformerts-objects"},"DataTransformerTS Objects"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-python"},"class DataTransformerTS()\n")),(0,n.yg)("p",null,"Transform input time series training data."),(0,n.yg)("h4",{id:"fit"},"fit"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-python"},"def fit(X: Union[DataFrame, np.array], y)\n")),(0,n.yg)("p",null,"Fit transformer."),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"Arguments"),":"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"X")," - A numpy array or a pandas dataframe of training data."),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"y")," - A numpy array or a pandas series of labels.")),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"Returns"),":"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"X")," - Processed numpy array or pandas dataframe of training data."),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"y")," - Processed numpy array or pandas series of labels.")))}c.isMDXComponent=!0}}]);