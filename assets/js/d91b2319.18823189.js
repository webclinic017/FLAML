"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6744],{5680:(e,r,t)=>{t.d(r,{xA:()=>u,yg:()=>d});var n=t(6540);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function l(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function i(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var f=n.createContext({}),p=function(e){var r=n.useContext(f),t=r;return e&&(t="function"==typeof e?e(r):l(l({},r),e)),t},u=function(e){var r=p(e.components);return n.createElement(f.Provider,{value:r},e.children)},c={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},s=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,a=e.originalType,f=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),s=p(t),d=o,g=s["".concat(f,".").concat(d)]||s[d]||c[d]||a;return t?n.createElement(g,l(l({ref:r},u),{},{components:t})):n.createElement(g,l({ref:r},u))}));function d(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=t.length,l=new Array(a);l[0]=s;var i={};for(var f in r)hasOwnProperty.call(r,f)&&(i[f]=r[f]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var p=2;p<a;p++)l[p]=t[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,t)}s.displayName="MDXCreateElement"},8338:(e,r,t)=>{t.r(r),t.d(r,{contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>f});var n=t(8168),o=(t(6540),t(5680));const a={sidebar_label:"portfolio",title:"default.portfolio"},l=void 0,i={unversionedId:"reference/default/portfolio",id:"reference/default/portfolio",isDocsHomePage:!1,title:"default.portfolio",description:"config\\predictor\\tuple",source:"@site/docs/reference/default/portfolio.md",sourceDirName:"reference/default",slug:"/reference/default/portfolio",permalink:"/FLAML/docs/reference/default/portfolio",editUrl:"https://github.com/microsoft/FLAML/edit/main/website/docs/reference/default/portfolio.md",tags:[],version:"current",frontMatter:{sidebar_label:"portfolio",title:"default.portfolio"},sidebar:"referenceSideBar",previous:{title:"greedy",permalink:"/FLAML/docs/reference/default/greedy"},next:{title:"suggest",permalink:"/FLAML/docs/reference/default/suggest"}},f=[{value:"config_predictor_tuple",id:"config_predictor_tuple",children:[],level:4},{value:"build_portfolio",id:"build_portfolio",children:[],level:4},{value:"load_json",id:"load_json",children:[],level:4},{value:"serialize",id:"serialize",children:[],level:4}],p={toc:f};function u(e){let{components:r,...t}=e;return(0,o.yg)("wrapper",(0,n.A)({},p,t,{components:r,mdxType:"MDXLayout"}),(0,o.yg)("h4",{id:"config_predictor_tuple"},"config","_","predictor","_","tuple"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-python"},"def config_predictor_tuple(tasks, configs, meta_features, regret_matrix)\n")),(0,o.yg)("p",null,"Config predictor represented in tuple."),(0,o.yg)("p",null,"The returned tuple consists of (meta_features, preferences, proc)."),(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},"Returns"),":"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"meta_features_norm")," - A dataframe of normalized meta features, each column for a task."),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"preferences")," - A dataframe of sorted configuration indicies by their performance per task (column)."),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"regret_matrix")," - A dataframe of the configuration(row)-task(column) regret matrix.")),(0,o.yg)("h4",{id:"build_portfolio"},"build","_","portfolio"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-python"},"def build_portfolio(meta_features, regret, strategy)\n")),(0,o.yg)("p",null,"Build a portfolio from meta features and regret matrix."),(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},"Arguments"),":"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"meta_features")," - A dataframe of metafeatures matrix."),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"regret")," - A dataframe of regret matrix."),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"strategy"),' - A str of the strategy, one of ("greedy", "greedy-feedback").')),(0,o.yg)("h4",{id:"load_json"},"load","_","json"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-python"},"def load_json(filename)\n")),(0,o.yg)("p",null,"Returns the contents of json file filename."),(0,o.yg)("h4",{id:"serialize"},"serialize"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-python"},"def serialize(configs, regret, meta_features, output_file, config_path)\n")),(0,o.yg)("p",null,"Store to disk all information FLAML-metalearn needs at runtime."),(0,o.yg)("p",null,"configs: names of model configs\nregret: regret matrix\nmeta_features: task metafeatures\noutput_file: filename\nconfig_path: path containing config json files"))}u.isMDXComponent=!0}}]);